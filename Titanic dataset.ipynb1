{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>PassengerId</th>\n",
       "      <th>Survived</th>\n",
       "      <th>Pclass</th>\n",
       "      <th>Name</th>\n",
       "      <th>Sex</th>\n",
       "      <th>Age</th>\n",
       "      <th>SibSp</th>\n",
       "      <th>Parch</th>\n",
       "      <th>Ticket</th>\n",
       "      <th>Fare</th>\n",
       "      <th>Cabin</th>\n",
       "      <th>Embarked</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>Braund, Mr. Owen Harris</td>\n",
       "      <td>male</td>\n",
       "      <td>22.0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>A/5 21171</td>\n",
       "      <td>7.2500</td>\n",
       "      <td>NaN</td>\n",
       "      <td>S</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>Cumings, Mrs. John Bradley (Florence Briggs Th...</td>\n",
       "      <td>female</td>\n",
       "      <td>38.0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>PC 17599</td>\n",
       "      <td>71.2833</td>\n",
       "      <td>C85</td>\n",
       "      <td>C</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>2</td>\n",
       "      <td>3</td>\n",
       "      <td>1</td>\n",
       "      <td>3</td>\n",
       "      <td>Heikkinen, Miss. Laina</td>\n",
       "      <td>female</td>\n",
       "      <td>26.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>STON/O2. 3101282</td>\n",
       "      <td>7.9250</td>\n",
       "      <td>NaN</td>\n",
       "      <td>S</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>3</td>\n",
       "      <td>4</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>Futrelle, Mrs. Jacques Heath (Lily May Peel)</td>\n",
       "      <td>female</td>\n",
       "      <td>35.0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>113803</td>\n",
       "      <td>53.1000</td>\n",
       "      <td>C123</td>\n",
       "      <td>S</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>4</td>\n",
       "      <td>5</td>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>Allen, Mr. William Henry</td>\n",
       "      <td>male</td>\n",
       "      <td>35.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>373450</td>\n",
       "      <td>8.0500</td>\n",
       "      <td>NaN</td>\n",
       "      <td>S</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>886</td>\n",
       "      <td>887</td>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "      <td>Montvila, Rev. Juozas</td>\n",
       "      <td>male</td>\n",
       "      <td>27.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>211536</td>\n",
       "      <td>13.0000</td>\n",
       "      <td>NaN</td>\n",
       "      <td>S</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>887</td>\n",
       "      <td>888</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>Graham, Miss. Margaret Edith</td>\n",
       "      <td>female</td>\n",
       "      <td>19.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>112053</td>\n",
       "      <td>30.0000</td>\n",
       "      <td>B42</td>\n",
       "      <td>S</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>888</td>\n",
       "      <td>889</td>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>Johnston, Miss. Catherine Helen \"Carrie\"</td>\n",
       "      <td>female</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>W./C. 6607</td>\n",
       "      <td>23.4500</td>\n",
       "      <td>NaN</td>\n",
       "      <td>S</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>889</td>\n",
       "      <td>890</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>Behr, Mr. Karl Howell</td>\n",
       "      <td>male</td>\n",
       "      <td>26.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>111369</td>\n",
       "      <td>30.0000</td>\n",
       "      <td>C148</td>\n",
       "      <td>C</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>890</td>\n",
       "      <td>891</td>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>Dooley, Mr. Patrick</td>\n",
       "      <td>male</td>\n",
       "      <td>32.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>370376</td>\n",
       "      <td>7.7500</td>\n",
       "      <td>NaN</td>\n",
       "      <td>Q</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>891 rows Ã— 12 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "     PassengerId  Survived  Pclass  \\\n",
       "0              1         0       3   \n",
       "1              2         1       1   \n",
       "2              3         1       3   \n",
       "3              4         1       1   \n",
       "4              5         0       3   \n",
       "..           ...       ...     ...   \n",
       "886          887         0       2   \n",
       "887          888         1       1   \n",
       "888          889         0       3   \n",
       "889          890         1       1   \n",
       "890          891         0       3   \n",
       "\n",
       "                                                  Name     Sex   Age  SibSp  \\\n",
       "0                              Braund, Mr. Owen Harris    male  22.0      1   \n",
       "1    Cumings, Mrs. John Bradley (Florence Briggs Th...  female  38.0      1   \n",
       "2                               Heikkinen, Miss. Laina  female  26.0      0   \n",
       "3         Futrelle, Mrs. Jacques Heath (Lily May Peel)  female  35.0      1   \n",
       "4                             Allen, Mr. William Henry    male  35.0      0   \n",
       "..                                                 ...     ...   ...    ...   \n",
       "886                              Montvila, Rev. Juozas    male  27.0      0   \n",
       "887                       Graham, Miss. Margaret Edith  female  19.0      0   \n",
       "888           Johnston, Miss. Catherine Helen \"Carrie\"  female   NaN      1   \n",
       "889                              Behr, Mr. Karl Howell    male  26.0      0   \n",
       "890                                Dooley, Mr. Patrick    male  32.0      0   \n",
       "\n",
       "     Parch            Ticket     Fare Cabin Embarked  \n",
       "0        0         A/5 21171   7.2500   NaN        S  \n",
       "1        0          PC 17599  71.2833   C85        C  \n",
       "2        0  STON/O2. 3101282   7.9250   NaN        S  \n",
       "3        0            113803  53.1000  C123        S  \n",
       "4        0            373450   8.0500   NaN        S  \n",
       "..     ...               ...      ...   ...      ...  \n",
       "886      0            211536  13.0000   NaN        S  \n",
       "887      0            112053  30.0000   B42        S  \n",
       "888      2        W./C. 6607  23.4500   NaN        S  \n",
       "889      0            111369  30.0000  C148        C  \n",
       "890      0            370376   7.7500   NaN        Q  \n",
       "\n",
       "[891 rows x 12 columns]"
      ]
     },
     "execution_count": 2,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#importing the packages\n",
    "import numpy as np\n",
    "import pandas as pd\n",
    "# data visualization\n",
    "import seaborn as sns\n",
    "\n",
    "#Algorithms\n",
    "from matplotlib import pyplot as plt\n",
    "from sklearn import linear_model\n",
    "from sklearn.linear_model import LogisticRegression\n",
    "from sklearn.ensemble import RandomForestClassifier\n",
    "from sklearn.linear_model import Perceptron\n",
    "from sklearn.linear_model import SGDClassifier\n",
    "from sklearn.tree import DecisionTreeClassifier\n",
    "from sklearn.neighbors import KNeighborsClassifier\n",
    "from sklearn.svm import SVC, LinearSVC\n",
    "from sklearn.naive_bayes import GaussianNB\n",
    "\n",
    "# getting the data\n",
    "train = pd.read_csv(\"titanic_train.csv\")\n",
    "test = pd.read_csv(\"titanic_test.csv\")\n",
    "train"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 891 entries, 0 to 890\n",
      "Data columns (total 12 columns):\n",
      "PassengerId    891 non-null int64\n",
      "Survived       891 non-null int64\n",
      "Pclass         891 non-null int64\n",
      "Name           891 non-null object\n",
      "Sex            891 non-null object\n",
      "Age            714 non-null float64\n",
      "SibSp          891 non-null int64\n",
      "Parch          891 non-null int64\n",
      "Ticket         891 non-null object\n",
      "Fare           891 non-null float64\n",
      "Cabin          204 non-null object\n",
      "Embarked       889 non-null object\n",
      "dtypes: float64(2), int64(5), object(5)\n",
      "memory usage: 83.7+ KB\n"
     ]
    }
   ],
   "source": [
    "train.info()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>PassengerId</th>\n",
       "      <th>Survived</th>\n",
       "      <th>Pclass</th>\n",
       "      <th>Age</th>\n",
       "      <th>SibSp</th>\n",
       "      <th>Parch</th>\n",
       "      <th>Fare</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>count</td>\n",
       "      <td>891.000000</td>\n",
       "      <td>891.000000</td>\n",
       "      <td>891.000000</td>\n",
       "      <td>714.000000</td>\n",
       "      <td>891.000000</td>\n",
       "      <td>891.000000</td>\n",
       "      <td>891.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>mean</td>\n",
       "      <td>446.000000</td>\n",
       "      <td>0.383838</td>\n",
       "      <td>2.308642</td>\n",
       "      <td>29.699118</td>\n",
       "      <td>0.523008</td>\n",
       "      <td>0.381594</td>\n",
       "      <td>32.204208</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>std</td>\n",
       "      <td>257.353842</td>\n",
       "      <td>0.486592</td>\n",
       "      <td>0.836071</td>\n",
       "      <td>14.526497</td>\n",
       "      <td>1.102743</td>\n",
       "      <td>0.806057</td>\n",
       "      <td>49.693429</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>min</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.420000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>25%</td>\n",
       "      <td>223.500000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>2.000000</td>\n",
       "      <td>20.125000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>7.910400</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>50%</td>\n",
       "      <td>446.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>3.000000</td>\n",
       "      <td>28.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>14.454200</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>75%</td>\n",
       "      <td>668.500000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>3.000000</td>\n",
       "      <td>38.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>31.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>max</td>\n",
       "      <td>891.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>3.000000</td>\n",
       "      <td>80.000000</td>\n",
       "      <td>8.000000</td>\n",
       "      <td>6.000000</td>\n",
       "      <td>512.329200</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "       PassengerId    Survived      Pclass         Age       SibSp  \\\n",
       "count   891.000000  891.000000  891.000000  714.000000  891.000000   \n",
       "mean    446.000000    0.383838    2.308642   29.699118    0.523008   \n",
       "std     257.353842    0.486592    0.836071   14.526497    1.102743   \n",
       "min       1.000000    0.000000    1.000000    0.420000    0.000000   \n",
       "25%     223.500000    0.000000    2.000000   20.125000    0.000000   \n",
       "50%     446.000000    0.000000    3.000000   28.000000    0.000000   \n",
       "75%     668.500000    1.000000    3.000000   38.000000    1.000000   \n",
       "max     891.000000    1.000000    3.000000   80.000000    8.000000   \n",
       "\n",
       "            Parch        Fare  \n",
       "count  891.000000  891.000000  \n",
       "mean     0.381594   32.204208  \n",
       "std      0.806057   49.693429  \n",
       "min      0.000000    0.000000  \n",
       "25%      0.000000    7.910400  \n",
       "50%      0.000000   14.454200  \n",
       "75%      0.000000   31.000000  \n",
       "max      6.000000  512.329200  "
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "train.describe()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "PassengerId      0\n",
       "Survived         0\n",
       "Pclass           0\n",
       "Name             0\n",
       "Sex              0\n",
       "Age            177\n",
       "SibSp            0\n",
       "Parch            0\n",
       "Ticket           0\n",
       "Fare             0\n",
       "Cabin          687\n",
       "Embarked         2\n",
       "dtype: int64"
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "train.isnull().sum()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "PassengerId    0.000000\n",
       "Survived       0.000000\n",
       "Pclass         0.000000\n",
       "Name           0.000000\n",
       "Sex            0.000000\n",
       "Age            0.198653\n",
       "SibSp          0.000000\n",
       "Parch          0.000000\n",
       "Ticket         0.000000\n",
       "Fare           0.000000\n",
       "Cabin          0.771044\n",
       "Embarked       0.002245\n",
       "dtype: float64"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "train.isnull().sum()/len(train)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.axes._subplots.AxesSubplot at 0x7f7c2de46810>"
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAAAYUAAAEGCAYAAACKB4k+AAAABHNCSVQICAgIfAhkiAAAAAlwSFlzAAALEgAACxIB0t1+/AAAADh0RVh0U29mdHdhcmUAbWF0cGxvdGxpYiB2ZXJzaW9uMy4xLjEsIGh0dHA6Ly9tYXRwbG90bGliLm9yZy8QZhcZAAAPZElEQVR4nO3dfazeZX3H8fcHCrKJ8mA7hm23stloWFTUM8SHZE72IMxZ4gQxOio26ZawReOcY1syH+IWzZwOp7I1Qy1kExDn6IxTCQ9zGlBPJ/I4Z8dgtII9PCo6nWXf/XGuc3Eop+Vu6e/cp5z3K7lzX7/rd/1+9/cmzflw/Z7uVBWSJAEcMO4CJEkLh6EgSeoMBUlSZyhIkjpDQZLULRl3AY/F0qVLa9WqVeMuQ5L2K5s3b76rqpbNtW6/DoVVq1YxOTk57jIkab+S5LZdrfPwkSSpMxQkSZ2hIEnqDAVJUmcoSJI6Q0GS1BkKkqTOUJAkdYaCJKnbr+9o3hee9/vnj7sELUCb//yMcZcgjYUzBUlSZyhIkjpDQZLUGQqSpM5QkCR1hoIkqTMUJEmdoSBJ6gwFSVJnKEiSOkNBktQZCpKkzlCQJHWGgiSpGzQUktya5Pok1yaZbH1HJrksyTfb+xGtP0k+kGRLkuuSPHfI2iRJjzQfM4VfrKrjqmqiLZ8NXF5Vq4HL2zLAScDq9loPnDsPtUmSZhnH4aM1wMbW3gicMqv//Jp2DXB4kqPHUJ8kLVpDh0IBn0+yOcn61ndUVd3R2ncCR7X2cuD2WdtubX0Pk2R9kskkk1NTU0PVLUmL0tA/x/niqtqW5CeAy5L8++yVVVVJak92WFUbgA0AExMTe7StJGn3Bp0pVNW29r4d+BRwPPDtmcNC7X17G74NWDlr8xWtT5I0TwYLhSRPTPKkmTbwK8ANwCZgbRu2Fri0tTcBZ7SrkE4A7p91mEmSNA+GPHx0FPCpJDOf8/dV9dkkXwUuTrIOuA04rY3/DHAysAX4PnDmgLVJkuYwWChU1S3As+fovxs4cY7+As4aqh5J0qPzjmZJUmcoSJI6Q0GS1BkKkqTOUJAkdYaCJKkzFCRJnaEgSeoMBUlSZyhIkjpDQZLUGQqSpM5QkCR1hoIkqTMUJEmdoSBJ6gwFSVJnKEiSOkNBktQZCpKkzlCQJHWGgiSpMxQkSZ2hIEnqDAVJUmcoSJI6Q0GS1BkKkqTOUJAkdYOHQpIDk3wtyafb8jFJvpxkS5KLkhzc+p/Qlre09auGrk2S9HDzMVN4I3DzrOX3AO+vqqcB9wLrWv864N7W//42TpI0jwYNhSQrgF8D/rYtB3gpcEkbshE4pbXXtGXa+hPbeEnSPBl6pvCXwFuB/2vLTwHuq6odbXkrsLy1lwO3A7T197fxD5NkfZLJJJNTU1ND1i5Ji85goZDk5cD2qtq8L/dbVRuqaqKqJpYtW7Yvdy1Ji96SAff9IuAVSU4GDgGeDJwDHJ5kSZsNrAC2tfHbgJXA1iRLgMOAuwesT5K0k8FmClX1h1W1oqpWAacDV1TVa4ErgVe1YWuBS1t7U1umrb+iqmqo+iRJjzSO+xT+AHhzki1MnzM4r/WfBzyl9b8ZOHsMtUnSojbk4aOuqq4CrmrtW4Dj5xjzA+DU+ahHkjQ372iWJHWGgiSpMxQkSZ2hIEnqDAVJUmcoSJI6Q0GS1BkKkqTOUJAkdYaCJKkzFCRJnaEgSeoMBUlSZyhIkjpDQZLUGQqSpG5efmRH0p7773c+c9wlaAH6qT+5ftD9O1OQJHWGgiSpMxQkSZ2hIEnqDAVJUmcoSJI6Q0GS1BkKkqRupFBIcvkofZKk/dtu72hOcgjw48DSJEcAaaueDCwfuDZJ0jx7tMdc/BbwJuCpwGYeCoXvAB8csC5J0hjs9vBRVZ1TVccAb6mqn6mqY9rr2VW121BIckiSryT5epIbk7yj9R+T5MtJtiS5KMnBrf8JbXlLW79qH31HSdKIRnogXlX9VZIXAqtmb1NV5+9msx8CL62qB5IcBHwxyT8DbwbeX1UXJvlrYB1wbnu/t6qeluR04D3Aq/fmS0mS9s6oJ5ovAN4LvBj4+faa2N02Ne2BtnhQexXwUuCS1r8ROKW117Rl2voTk8wcrpIkzYNRH509ARxbVbUnO09yINPnIp4GfAj4T+C+qtrRhmzloRPWy4HbAapqR5L7gacAd+3JZ0qS9t6o9yncAPzknu68qh6squOAFcDxwDP2dB87S7I+yWSSyampqce6O0nSLKPOFJYCNyX5CtPnCgCoqleMsnFV3ZfkSuAFwOFJlrTZwgpgWxu2DVgJbE2yBDgMuHuOfW0ANgBMTEzs0cxFkrR7o4bC2/d0x0mWAT9qgfBjwC8zffL4SuBVwIXAWuDStsmmtnx1W3/Fnh6ukiQ9NqNeffQve7Hvo4GN7bzCAcDFVfXpJDcBFyZ5F/A14Lw2/jzggiRbgHuA0/fiMyVJj8FIoZDku0xfOQRwMNNXEn2vqp68q22q6jrgOXP038L0+YWd+38AnDpKPZKkYYw6U3jSTLtdJroGOGGooiRJ47HHT0lt9x/8I/CrA9QjSRqjUQ8fvXLW4gFM37fwg0EqkiSNzahXH/36rPYO4FamDyFJkh5HRj2ncObQhUiSxm/UZx+tSPKpJNvb65NJVgxdnCRpfo16ovmjTN9c9tT2+qfWJ0l6HBk1FJZV1Uerakd7fQxYNmBdkqQxGDUU7k7yuiQHttfrmOO5RJKk/duoofAG4DTgTuAOpp9N9PqBapIkjcmol6S+E1hbVfcCJDmS6R/decNQhUmS5t+oM4VnzQQCQFXdwxzPNZIk7d9GDYUDkhwxs9BmCqPOMiRJ+4lR/7D/BXB1kk+05VOBPx2mJEnSuIx6R/P5SSaBl7auV1bVTcOVJUkah5EPAbUQMAgk6XFsjx+dLUl6/DIUJEmdoSBJ6gwFSVJnKEiSOkNBktQZCpKkzlCQJHWGgiSpMxQkSZ2hIEnqDAVJUmcoSJK6wUIhycokVya5KcmNSd7Y+o9MclmSb7b3I1p/knwgyZYk1yV57lC1SZLmNuRMYQfwe1V1LHACcFaSY4GzgcurajVweVsGOAlY3V7rgXMHrE2SNIfBQqGq7qiqf2vt7wI3A8uBNcDGNmwjcEprrwHOr2nXAIcnOXqo+iRJjzQv5xSSrAKeA3wZOKqq7mir7gSOau3lwO2zNtva+nbe1/okk0kmp6amBqtZkhajwUMhyaHAJ4E3VdV3Zq+rqgJqT/ZXVRuqaqKqJpYtW7YPK5UkDRoKSQ5iOhD+rqr+oXV/e+awUHvf3vq3AStnbb6i9UmS5smQVx8FOA+4uareN2vVJmBta68FLp3Vf0a7CukE4P5Zh5kkSfNgyYD7fhHwm8D1Sa5tfX8EvBu4OMk64DbgtLbuM8DJwBbg+8CZA9YmSZrDYKFQVV8EsovVJ84xvoCzhqpHkvTovKNZktQZCpKkzlCQJHWGgiSpMxQkSZ2hIEnqDAVJUmcoSJI6Q0GS1BkKkqTOUJAkdYaCJKkzFCRJnaEgSeoMBUlSZyhIkjpDQZLUGQqSpM5QkCR1hoIkqTMUJEmdoSBJ6gwFSVJnKEiSOkNBktQZCpKkzlCQJHWGgiSpMxQkSd1goZDkI0m2J7lhVt+RSS5L8s32fkTrT5IPJNmS5Lokzx2qLknSrg05U/gY8LKd+s4GLq+q1cDlbRngJGB1e60Hzh2wLknSLgwWClX1BeCenbrXABtbeyNwyqz+82vaNcDhSY4eqjZJ0tzm+5zCUVV1R2vfCRzV2suB22eN29r6HiHJ+iSTSSanpqaGq1SSFqGxnWiuqgJqL7bbUFUTVTWxbNmyASqTpMVrvkPh2zOHhdr79ta/DVg5a9yK1idJmkfzHQqbgLWtvRa4dFb/Ge0qpBOA+2cdZpIkzZMlQ+04yceBlwBLk2wF3ga8G7g4yTrgNuC0NvwzwMnAFuD7wJlD1SVJ2rXBQqGqXrOLVSfOMbaAs4aqRZI0Gu9oliR1hoIkqTMUJEmdoSBJ6gwFSVJnKEiSOkNBktQZCpKkzlCQJHWGgiSpMxQkSZ2hIEnqDAVJUmcoSJI6Q0GS1BkKkqTOUJAkdYaCJKkzFCRJnaEgSeoMBUlSZyhIkjpDQZLUGQqSpM5QkCR1hoIkqTMUJEmdoSBJ6gwFSVK3oEIhycuSfCPJliRnj7seSVpsFkwoJDkQ+BBwEnAs8Jokx463KklaXBZMKADHA1uq6paq+l/gQmDNmGuSpEVlybgLmGU5cPus5a3A83celGQ9sL4tPpDkG/NQ22KxFLhr3EUsBHnv2nGXoIfz3+aMt2Vf7OWnd7ViIYXCSKpqA7Bh3HU8HiWZrKqJcdch7cx/m/NnIR0+2gasnLW8ovVJkubJQgqFrwKrkxyT5GDgdGDTmGuSpEVlwRw+qqodSX4H+BxwIPCRqrpxzGUtNh6W00Llv815kqoadw2SpAViIR0+kiSNmaEgSeoMBfl4ES1YST6SZHuSG8Zdy2JhKCxyPl5EC9zHgJeNu4jFxFCQjxfRglVVXwDuGXcdi4mhoLkeL7J8TLVIGjNDQZLUGQry8SKSOkNBPl5EUmcoLHJVtQOYebzIzcDFPl5EC0WSjwNXA09PsjXJunHX9HjnYy4kSZ0zBUlSZyhIkjpDQZLUGQqSpM5QkCR1hoIEJPnjJDcmuS7JtUmevw/2+Yp99dTZJA/si/1Ij8ZLUrXoJXkB8D7gJVX1wyRLgYOr6lsjbLuk3esxdI0PVNWhQ3+O5ExBgqOBu6rqhwBVdVdVfSvJrS0gSDKR5KrWfnuSC5J8CbggyTVJfm5mZ0muauNfn+SDSQ5LcluSA9r6Jya5PclBSX42yWeTbE7yr0me0cYck+TqJNcnedc8//fQImYoSPB5YGWS/0jy4SS/MMI2xwK/VFWvAS4CTgNIcjRwdFVNzgysqvuBa4GZ/b4c+FxV/YjpH6T/3ap6HvAW4MNtzDnAuVX1TOCOx/wNpREZClr0quoB4HnAemAKuCjJ6x9ls01V9T+tfTHwqtY+DbhkjvEXAa9u7dPbZxwKvBD4RJJrgb9hetYC8CLg4619wR59IekxWDLuAqSFoKoeBK4CrkpyPbAW2MFD/+N0yE6bfG/WttuS3J3kWUz/4f/tOT5iE/BnSY5kOoCuAJ4I3FdVx+2qrL38OtJec6agRS/J05OsntV1HHAbcCvTf8ABfuNRdnMR8FbgsKq6bueVbTbyVaYPC326qh6squ8A/5Xk1FZHkjy7bfIlpmcUAK/d828l7R1DQYJDgY1JbkpyHdPnC94OvAM4J8kk8OCj7OMSpv+IX7ybMRcBr2vvM14LrEvydeBGHvop1DcCZ7VZi7+Ep3njJamSpM6ZgiSpMxQkSZ2hIEnqDAVJUmcoSJI6Q0GS1BkKkqTu/wH4gcjVw7UORgAAAABJRU5ErkJggg==\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "#Analysing the data\n",
    "sns.countplot(x = \"Survived\",data = train)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.axes._subplots.AxesSubplot at 0x7f7c25e609d0>"
      ]
     },
     "execution_count": 8,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "sns.countplot(x = \"Survived\",hue = \"Pclass\",data = train)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.axes._subplots.AxesSubplot at 0x7f7c2578d210>"
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "sns.countplot(x = \"Survived\",hue = \"Pclass\",data = train)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.axes._subplots.AxesSubplot at 0x7f7c25724250>"
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "sns.countplot(x = \"Survived\",hue = \"Pclass\",data = train)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.axes._subplots.AxesSubplot at 0x7f7c256f6410>"
      ]
     },
     "execution_count": 11,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Age is analysed without cleaning the data\n",
    "train[\"Age\"].plot.hist()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.axes._subplots.AxesSubplot at 0x7f7c257a1950>"
      ]
     },
     "execution_count": 12,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 720x144 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "train[\"Fare\"].plot.hist(bins = 20,figsize = (10,2))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.axes._subplots.AxesSubplot at 0x7f7c25560590>"
      ]
     },
     "execution_count": 13,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAAAYUAAAEGCAYAAACKB4k+AAAABHNCSVQICAgIfAhkiAAAAAlwSFlzAAALEgAACxIB0t1+/AAAADh0RVh0U29mdHdhcmUAbWF0cGxvdGxpYiB2ZXJzaW9uMy4xLjEsIGh0dHA6Ly9tYXRwbG90bGliLm9yZy8QZhcZAAAUlklEQVR4nO3dfZBX1Z3n8fcXQdkMKIlQLgIOXeMzi0jA50oFdQ06MdEy0Zg1CYxWsdHEh9qoq0GjYyQ1U8uaNRrNmDIDWibxISYy1lQmo4FoRiLSgs8aiYvaDhkRhAguptHv/tG3jx1pQjf07V83/X5VdXHuuefe/v662v54z72/84vMRJIkgEGNLkCS1HcYCpKkwlCQJBWGgiSpMBQkScXgRhewI0aOHJnjx49vdBmS1K80Nze/kZmjOtvXr0Nh/PjxLF26tNFlSFK/EhEvb22f00eSpMJQkCQVhoIkqejX9xQkCaC1tZWWlhY2bdrU6FL6lKFDhzJ27FiGDBnS5WMMBUn9XktLC8OHD2f8+PFERKPL6RMykzVr1tDS0kJTU1OXj3P6SFK/t2nTJvbcc08DoYOIYM899+z21ZOhIGmnYCBsaXt+JoaCJKkwFCSpm+bMmcOECRM45JBDOPTQQ3n00UcbXVKPGfA3mqdcclujS+gzmv/XlxpdgtTnLV68mPvvv5/HH3+c3XbbjTfeeIM//vGPjS6rx3ilIEndsGrVKkaOHMluu+0GwMiRI9l7771pbm7m4x//OFOmTGH69OmsWrWKzZs3c9hhh7Fo0SIALr/8cmbPnt3A6rfNUJCkbvjEJz7Bq6++yv777895553Hr371K1pbWzn//PO55557aG5u5uyzz2b27NkMHjyYefPmce655/LAAw/w85//nKuuuqrRL+HPGvDTR5LUHcOGDaO5uZmHH36YhQsX8rnPfY4rrriCp59+mhNOOAGAd999l9GjRwMwYcIEvvjFL3LyySezePFidt1110aWv02GgiR10y677MK0adOYNm0aEydO5Lvf/S4TJkxg8eLFnY5/6qmnGDFiBK+//novV9p9Th9JUje88MILvPjii2V7+fLlHHTQQaxevbqEQmtrK8888wwA9957L2vXruWhhx7i/PPPZ926dQ2pu6u8UpCkbtiwYUP54z548GD23XdfbrnlFmbNmsUFF1zA+vXr2bx5MxdddBF77bUXl112GQ8++CDjxo3jq1/9KhdeeCHz589v9MvYKkNBkrphypQpPPLII1v0jxw5koceemiL/t/+9relfcEFF9RaW09w+kiSVBgKkqTCUJAkFYaCJKkwFCRJhaEgSSp8JFXSTqenVz+uewXhRYsWMXfuXO6///5av09XeKUgSSoMBUnqAStXruTAAw9k5syZ7L///px11lk88MADHHPMMey3334sWbKEJUuWcNRRRzF58mSOPvpoXnjhhS3Os3HjRs4++2wOP/xwJk+ezH333derr8NQkKQesmLFCr72ta/x/PPP8/zzz/PDH/6QX//618ydO5dvfetbHHjggTz88MMsW7aMa665hq9//etbnGPOnDkcd9xxLFmyhIULF3LJJZewcePGXnsN3lOQpB7S1NTExIkTgbYls48//ngigokTJ7Jy5UrWr1/PjBkzePHFF4kIWltbtzjHL37xCxYsWMDcuXMB2LRpE6+88goHHXRQr7wGQ0GSekj7p7EBDBo0qGwPGjSIzZs3c+WVV3Lsscfy05/+lJUrVzJt2rQtzpGZ/OQnP+GAAw7orbL/hNNHktRL1q9fz5gxYwCYN29ep2OmT5/ODTfcQGYCsGzZst4qD/BKQdJOqO5HSLfXpZdeyowZM7j22mv55Cc/2emYK6+8kosuuohDDjmE9957j6ampl59VDXa06g/mjp1ai5dunSHztHTzzP3Z331PyRpW5577rlem3Pvbzr72UREc2ZO7Wy800eSpMJQkCQVhoIkqTAUJElF7aEQEbtExLKIuL/aboqIRyNiRUTcGRG7Vv27Vdsrqv3j665NkvSneuNK4ULguQ7bfw98OzP3Bd4Ezqn6zwHerPq/XY2TJPWiWt+nEBFjgU8Cc4D/EREBHAf8t2rIfOBq4GbglKoNcA9wY0RE9udnZiU1xCvXTOzR8+3zjae6NO473/kON998Mx/96Ee54447erQGgKuvvpphw4Zx8cUX9/i529X95rX/A1wKDK+29wTWZebmarsFGFO1xwCvAmTm5ohYX41/o+MJI2IWMAtgn332qbV4SeqOm266iQceeICxY8c2upTtVtv0UUScDLyemc09ed7MvCUzp2bm1FGjRvXkqSVpu335y1/mpZde4qSTTmLOnDmdLn89b948Tj31VE444QTGjx/PjTfeyHXX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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "sns.countplot(x = \"Survived\" , hue = \"Sex\",data = train)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 891 entries, 0 to 890\n",
      "Data columns (total 12 columns):\n",
      "PassengerId    891 non-null int64\n",
      "Survived       891 non-null int64\n",
      "Pclass         891 non-null int64\n",
      "Name           891 non-null object\n",
      "Sex            891 non-null object\n",
      "Age            714 non-null float64\n",
      "SibSp          891 non-null int64\n",
      "Parch          891 non-null int64\n",
      "Ticket         891 non-null object\n",
      "Fare           891 non-null float64\n",
      "Cabin          204 non-null object\n",
      "Embarked       889 non-null object\n",
      "dtypes: float64(2), int64(5), object(5)\n",
      "memory usage: 83.7+ KB\n"
     ]
    }
   ],
   "source": [
    "train.info()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.axes._subplots.AxesSubplot at 0x7f7c2552c610>"
      ]
     },
     "execution_count": 15,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "sns.countplot(x = \"Survived\",hue = \"SibSp\",data = train)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.axes._subplots.AxesSubplot at 0x7f7c2545ded0>"
      ]
     },
     "execution_count": 16,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "sns.countplot(x = \"SibSp\",data = train)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.axes._subplots.AxesSubplot at 0x7f7c253be050>"
      ]
     },
     "execution_count": 17,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAAAYUAAAEHCAYAAABBW1qbAAAABHNCSVQICAgIfAhkiAAAAAlwSFlzAAALEgAACxIB0t1+/AAAADh0RVh0U29mdHdhcmUAbWF0cGxvdGxpYiB2ZXJzaW9uMy4xLjEsIGh0dHA6Ly9tYXRwbG90bGliLm9yZy8QZhcZAAATmklEQVR4nO3df+xd9X3f8ecrGJKUJhjCdx6xnZotFhnaFqDf8mNUaQZLBzSNWZSSREtwKJNbibBEi9bSVmq2qpHSbWlKyISEIKmdpqEESnEjxIoM+dFuEGygQDAZLoLZFuBv+ZUQkiDoe3/cj08u9hf8/Rqfe/y1nw/p6n7O53zuuW9HxC+fzznnc1NVSJIE8JqhC5Ak7T8MBUlSx1CQJHUMBUlSx1CQJHUMBUlSZ1FfB05yHPBnY13/BPhdYF3rXwE8DJxXVU8lCXApcA7wHPCRqrrzlb7j6KOPrhUrVuzz2iXpQLZp06a/r6qp2fZlEs8pJDkE2A6cAlwEPFlVn05yCXBkVf1mknOAixmFwinApVV1yisdd3p6ujZu3Nhz9ZJ0YEmyqaqmZ9s3qemjM4G/q6pHgFXA2ta/Fji3tVcB62rkNmBxkmMmVJ8kicmFwgeAr7T2kqp6tLUfA5a09lJg69hntrU+SdKE9B4KSQ4D3gN8ddd9NZq7mtf8VZI1STYm2TgzM7OPqpQkwWTOFM4G7qyqx9v24zunhdr7jta/HVg+9rllre8lquqKqpququmpqVmvk0iS9tIkQuGD/GTqCGA9sLq1VwM3jPWfn5FTgWfGppkkSRPQ2y2pAEkOB94F/NpY96eBa5JcCDwCnNf6b2R059EWRrekXtBnbZKk3fUaClX1A+BNu/Q9wehupF3HFqPbVSVJA/GJZklSx1CQJHV6nT4aws/+53VDlzCrTf/9/KFLkKQ98kxBktQxFCRJHUNBktQxFCRJHUNBktQxFCRJHUNBktQxFCRJHUNBktQxFCRJHUNBktQxFCRJHUNBktQxFCRJHUNBktQxFCRJHUNBktQxFCRJHUNBktTpNRSSLE5ybZIHkmxOclqSo5LcnOTB9n5kG5skn0uyJck9SU7qszZJ0u76PlO4FLipqt4GvB3YDFwCbKiqlcCGtg1wNrCyvdYAl/dcmyRpF72FQpIjgHcAVwFU1fNV9TSwCljbhq0Fzm3tVcC6GrkNWJzkmL7qkyTtrs8zhWOBGeCLSe5KcmWSw4ElVfVoG/MYsKS1lwJbxz6/rfVJkiakz1BYBJwEXF5VJwI/4CdTRQBUVQE1n4MmWZNkY5KNMzMz+6xYSVK/obAN2FZVt7ftaxmFxOM7p4Xa+462fzuwfOzzy1rfS1TVFVU1XVXTU1NTvRUvSQej3kKhqh4DtiY5rnWdCdwPrAdWt77VwA2tvR44v92FdCrwzNg0kyRpAhb1fPyLgS8nOQx4CLiAURBdk+RC4BHgvDb2RuAcYAvwXBsrSZqgXkOhqu4GpmfZdeYsYwu4qM96JEmvzCeaJUkdQ0GS1DEUJEkdQ0GS1DEUJEkdQ0GS1DEUJEkdQ0GS1DEUJEkdQ0GS1DEUJEkdQ0GS1DEUJEkdQ0GS1DEUJEkdQ0GS1DEUJEkdQ0GS1DEUJEkdQ0GS1DEUJEmdXkMhycNJ7k1yd5KNre+oJDcnebC9H9n6k+RzSbYkuSfJSX3WJkna3STOFP51VZ1QVdNt+xJgQ1WtBDa0bYCzgZXttQa4fAK1SZLGDDF9tApY29prgXPH+tfVyG3A4iTHDFCfJB20+g6FAv4qyaYka1rfkqp6tLUfA5a09lJg69hnt7U+SdKELOr5+D9fVduT/CPg5iQPjO+sqkpS8zlgC5c1AG95y1v2XaWSpH7PFKpqe3vfAVwPnAw8vnNaqL3vaMO3A8vHPr6s9e16zCuqarqqpqempvosX5IOOr2FQpLDk7xhZxv4ReA+YD2wug1bDdzQ2uuB89tdSKcCz4xNM0mSJqDP6aMlwPVJdn7Pn1bVTUnuAK5JciHwCHBeG38jcA6wBXgOuKDH2iRJs+gtFKrqIeDts/Q/AZw5S38BF/VVjyRpz3yiWZLUMRQkSR1DQZLUMRQkSR1DQZLUMRQkSR1DQZLUMRQkSR1DQZLUMRQkSR1DQZLUMRQkSR1DQZLUMRQkSR1DQZLUMRQkSR1DQZLUMRQkSR1DQZLUMRQkSR1DQZLUMRQkSZ3eQyHJIUnuSvK1tn1sktuTbEnyZ0kOa/2vbdtb2v4VfdcmSXqpSZwpfAzYPLb9B8Bnq+qtwFPAha3/QuCp1v/ZNk6SNEG9hkKSZcAvAVe27QBnANe2IWuBc1t7Vdum7T+zjZckTUjfZwp/BPwG8A9t+03A01X1QtveBixt7aXAVoC2/5k2XpI0Ib2FQpJ3AzuqatM+Pu6aJBuTbJyZmdmXh5akg96cQiHJhrn07eJ04D1JHgauZjRtdCmwOMmiNmYZsL21twPL27EXAUcAT+x60Kq6oqqmq2p6ampqLuVLkuboFUMhyeuSHAUcneTIJEe11wp+Mu0zq6r6rapaVlUrgA8At1TVvwduBd7Xhq0Gbmjt9W2btv+Wqqq9+DNJkvbSoj3s/zXg48CbgU3Azgu/3wM+v5ff+ZvA1Ul+H7gLuKr1XwV8KckW4ElGQSJJmqBXDIWquhS4NMnFVXXZ3n5JVX0d+HprPwScPMuYHwG/srffIUl69fZ0pgBAVV2W5F8BK8Y/U1XreqpLkjSAOYVCki8B/xS4G3ixdRdgKEjSAWROoQBMA8d74VeSDmxzfU7hPuAf91mIJGl4cz1TOBq4P8m3gR/v7Kyq9/RSlSRpEHMNhf/SZxGSpP3DXO8++kbfhUiShjfXu4++z+huI4DDgEOBH1TVG/sqTJI0eXM9U3jDznZbznoVcGpfRUmShjHvVVJr5C+Af9tDPZKkAc11+ui9Y5uvYfTcwo96qUiSNJi53n30y2PtF4CHGU0hSZIOIHO9pnBB34VIkoY31x/ZWZbk+iQ72uu69vvLkqQDyFwvNH+R0Y/gvLm9/rL1SZIOIHMNhamq+mJVvdBefwz4W5iSdICZayg8keRDSQ5prw8xy+8nS5IWtrmGwq8C5wGPAY8y+g3lj/RUkyRpIHO9JfX3gNVV9RRAkqOA/8EoLCRJB4i5nin8y52BAFBVTwIn9lOSJGkocw2F1yQ5cudGO1OY61mGJGmBmOtf7J8B/k+Sr7btXwE+9UofSPI64JvAa9v3XFtVn0xyLHA18CZgE/Dhqno+yWsZ/ebzzzK6iP3+qnp4nn8eSdKrMKczhapaB7wXeLy93ltVX9rDx34MnFFVbwdOAM5KcirwB8Bnq+qtwFPAhW38hcBTrf+zbZwkaYLmvEpqVd1fVZ9vr/vnML6q6tm2eWh7FXAGcG3rXwuc29qr2jZt/5ltmW5J0oTMe+ns+WjPNNwN7ABuBv4OeLqqXmhDtgFLW3spsBWg7X+G0RSTJGlCeg2Fqnqxqk4AlgEnA297tcdMsibJxiQbZ2ZmXnWNkqSf6DUUdqqqp4FbgdOAxUl2XuBeBmxv7e3AcoC2/whmeWq6qq6oqumqmp6acqUNSdqXeguFJFNJFrf264F3AZsZhcP72rDVwA2tvb5t0/bfUlWFJGli+nzW4BhgbZJDGIXPNVX1tST3A1cn+X3gLuCqNv4q4EtJtgBPAh/osTZJ0ix6C4WquodZnnquqocYXV/Ytf9HjJ5/kCQNZCLXFCRJC4OhIEnqGAqSpI6hIEnqGAqSpI6hIEnqGAqSpI6hIEnqGAqSpI6hIEnqGAqSpI6hIEnqGAqSpI6hIEnqGAqSpI6hIEnqGAqSpI6hIEnqGAqSpI6hIEnqGAqSpI6hIEnq9BYKSZYnuTXJ/Um+k+Rjrf+oJDcnebC9H9n6k+RzSbYkuSfJSX3VJkmaXZ9nCi8An6iq44FTgYuSHA9cAmyoqpXAhrYNcDawsr3WAJf3WJskaRa9hUJVPVpVd7b294HNwFJgFbC2DVsLnNvaq4B1NXIbsDjJMX3VJ0na3USuKSRZAZwI3A4sqapH267HgCWtvRTYOvaxba1PkjQhvYdCkp8GrgM+XlXfG99XVQXUPI+3JsnGJBtnZmb2YaWSpF5DIcmhjALhy1X156378Z3TQu19R+vfDiwf+/iy1vcSVXVFVU1X1fTU1FR/xUvSQajPu48CXAVsrqo/HNu1Hljd2quBG8b6z293IZ0KPDM2zSRJmoBFPR77dODDwL1J7m59vw18GrgmyYXAI8B5bd+NwDnAFuA54IIea5MkzaK3UKiqvwbyMrvPnGV8ARf1VY8kac98olmS1DEUJEkdQ0GS1DEUJEkdQ0GS1DEUJEkdQ0GS1DEUJEkdQ0GS1DEUJEkdQ0GS1DEUJEkdQ0GS1DEUJEkdQ0GS1DEUJEkdQ0GS1DEUJEkdQ0GS1DEUJEmdRUMXoJf6f7/3L4YuYVZv+d17hy5B0gT0dqaQ5AtJdiS5b6zvqCQ3J3mwvR/Z+pPkc0m2JLknyUl91SVJenl9Th/9MXDWLn2XABuqaiWwoW0DnA2sbK81wOU91iVJehm9hUJVfRN4cpfuVcDa1l4LnDvWv65GbgMWJzmmr9okSbOb9IXmJVX1aGs/Bixp7aXA1rFx21qfJGmCBrv7qKoKqPl+LsmaJBuTbJyZmemhMkk6eE06FB7fOS3U3ne0/u3A8rFxy1rfbqrqiqqarqrpqampXouVpIPNpENhPbC6tVcDN4z1n9/uQjoVeGZsmkmSNCG9PaeQ5CvAO4Gjk2wDPgl8GrgmyYXAI8B5bfiNwDnAFuA54IK+6pIkvbzeQqGqPvgyu86cZWwBF/VViyRpblzmQpLUcZkL7VOnX3b60CXM6m8u/puhS5AWBM8UJEkdQ0GS1DEUJEkdQ0GS1DEUJEkdQ0GS1DEUJEkdQ0GS1DEUJEkdQ0GS1DEUJEkdQ0GS1DEUJEkdQ0GS1DEUJEkdQ0GS1DEUJEkdQ0GS1DEUJEkdQ0GS1NmvQiHJWUm+m2RLkkuGrkeSDjb7TSgkOQT4n8DZwPHAB5McP2xVknRwWTR0AWNOBrZU1UMASa4GVgH3D1qVDhrfeMcvDF3Cy/qFb35j6BJ696kPvW/oEmb1O39y7dAlTNT+FApLga1j29uAUwaqRVpwPv+Jvxy6hFl99DO/PHQJE7H5U7cMXcKs/tnvnDGv8amqnkqZnyTvA86qqv/Qtj8MnFJVH91l3BpgTds8Dvhuj2UdDfx9j8fvm/UPZyHXDtY/tL7r/5mqmpptx/50prAdWD62vaz1vURVXQFcMYmCkmysqulJfFcfrH84C7l2sP6hDVn/fnOhGbgDWJnk2CSHAR8A1g9ckyQdVPabM4WqeiHJR4H/BRwCfKGqvjNwWZJ0UNlvQgGgqm4Ebhy6jjETmabqkfUPZyHXDtY/tMHq328uNEuShrc/XVOQJA3MUJjFQl9uI8kXkuxIct/QtcxXkuVJbk1yf5LvJPnY0DXNR5LXJfl2kr9t9f/XoWvaG0kOSXJXkq8NXct8JXk4yb1J7k6yceh65ivJ4iTXJnkgyeYkp030+50+eqm23Mb/Bd7F6AG6O4APVtWCebI6yTuAZ4F1VfXPh65nPpIcAxxTVXcmeQOwCTh3ofzvnyTA4VX1bJJDgb8GPlZVtw1c2rwk+U/ANPDGqnr30PXMR5KHgemqWpDPKSRZC3yrqq5sd2L+VFU9Panv90xhd91yG1X1PLBzuY0Fo6q+CTw5dB17o6oerao7W/v7wGZGT7svCDXybNs8tL0W1L+8kiwDfgm4cuhaDjZJjgDeAVwFUFXPTzIQwFCYzWzLbSyYv5QOJElWACcCtw9byfy0qZe7gR3AzVW1oOoH/gj4DeAfhi5kLxXwV0k2tRUQFpJjgRngi2367sokh0+yAENB+6UkPw1cB3y8qr43dD3zUVUvVtUJjJ7KPznJgpnCS/JuYEdVbRq6llfh56vqJEYrLl/UplMXikXAScDlVXUi8ANgotc1DYXdzWm5DfWnzcVfB3y5qv586Hr2VjvtvxU4a+ha5uF04D1tXv5q4IwkfzJsSfNTVdvb+w7gekZTwgvFNmDb2NnltYxCYmIMhd253MaA2oXaq4DNVfWHQ9czX0mmkixu7dczumHhgWGrmruq+q2qWlZVKxj9t39LVX1o4LLmLMnh7QYF2rTLLwIL5i68qnoM2JrkuNZ1JhP++YD96onm/cGBsNxGkq8A7wSOTrIN+GRVXTVsVXN2OvBh4N42Lw/w2+1p94XgGGBtu4vtNcA1VbXgbutcwJYA14/+bcEi4E+r6qZhS5q3i4Evt3+UPgRcMMkv95ZUSVLH6SNJUsdQkCR1DAVJUsdQkCR1DAVJUsdQkPYgyYttxc37knw1yU/tg2N+JMnn90V90r5kKEh79sOqOqGtOPs88Otz/WB7XkFaMAwFaX6+BbwVIMlftEXXvjO+8FqSZ5N8JsnfAqcl+bkk/7v9xsK3dz5xC7w5yU1JHkzy3wb4s0i78YlmaY6SLGK0yNrOJ2R/taqebMtZ3JHkuqp6AjgcuL2qPtGeSn0AeH9V3ZHkjcAP2+dPYLQK7I+B7ya5rKq2Ig3IUJD27PVjS258i7bWPfAfk/y71l4OrASeAF5ktKAfwHHAo1V1B8DOFV/bMgwbquqZtn0/8DO8dNl2aeIMBWnPftiWwu4keSfwb4DTquq5JF8HXtd2/6iqXpzDcX881n4R//+o/YDXFKS9cwTwVAuEtwGnvsy47wLHJPk5gCRvaNNQ0n7J/zilvXMT8OtJNjP6i3/W32CuqueTvB+4rF17+CGjMwxpv+QqqZKkjtNHkqSOoSBJ6hgKkqSOoSBJ6hgKkqSOoSBJ6hgKkqSOoSBJ6vx/ThuGZTnpctwAAAAASUVORK5CYII=\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "sns.countplot(x = \"Parch\",data = train)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.axes._subplots.AxesSubplot at 0x7f7c2533df90>"
      ]
     },
     "execution_count": 18,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "sns.countplot(x = \"Survived\", hue = \"Parch\",data = train)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>PassengerId</th>\n",
       "      <th>Survived</th>\n",
       "      <th>Pclass</th>\n",
       "      <th>Name</th>\n",
       "      <th>Sex</th>\n",
       "      <th>Age</th>\n",
       "      <th>SibSp</th>\n",
       "      <th>Parch</th>\n",
       "      <th>Ticket</th>\n",
       "      <th>Fare</th>\n",
       "      <th>Cabin</th>\n",
       "      <th>Embarked</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>0</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>True</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>1</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>2</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>True</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>3</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>4</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>True</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>886</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>True</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>887</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>888</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>True</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>True</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>889</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>890</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>True</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>891 rows Ã— 12 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "     PassengerId  Survived  Pclass   Name    Sex    Age  SibSp  Parch  Ticket  \\\n",
       "0          False     False   False  False  False  False  False  False   False   \n",
       "1          False     False   False  False  False  False  False  False   False   \n",
       "2          False     False   False  False  False  False  False  False   False   \n",
       "3          False     False   False  False  False  False  False  False   False   \n",
       "4          False     False   False  False  False  False  False  False   False   \n",
       "..           ...       ...     ...    ...    ...    ...    ...    ...     ...   \n",
       "886        False     False   False  False  False  False  False  False   False   \n",
       "887        False     False   False  False  False  False  False  False   False   \n",
       "888        False     False   False  False  False   True  False  False   False   \n",
       "889        False     False   False  False  False  False  False  False   False   \n",
       "890        False     False   False  False  False  False  False  False   False   \n",
       "\n",
       "      Fare  Cabin  Embarked  \n",
       "0    False   True     False  \n",
       "1    False  False     False  \n",
       "2    False   True     False  \n",
       "3    False  False     False  \n",
       "4    False   True     False  \n",
       "..     ...    ...       ...  \n",
       "886  False   True     False  \n",
       "887  False  False     False  \n",
       "888  False   True     False  \n",
       "889  False  False     False  \n",
       "890  False   True     False  \n",
       "\n",
       "[891 rows x 12 columns]"
      ]
     },
     "execution_count": 19,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#DATA WRANGLING\n",
    "train.isnull()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "PassengerId      0\n",
       "Survived         0\n",
       "Pclass           0\n",
       "Name             0\n",
       "Sex              0\n",
       "Age            177\n",
       "SibSp            0\n",
       "Parch            0\n",
       "Ticket           0\n",
       "Fare             0\n",
       "Cabin          687\n",
       "Embarked         2\n",
       "dtype: int64"
      ]
     },
     "execution_count": 20,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "train.isnull().sum()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.axes._subplots.AxesSubplot at 0x7f7c252c2810>"
      ]
     },
     "execution_count": 21,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "sns.heatmap(train.isnull(),yticklabels=False , cmap = \"viridis\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.axes._subplots.AxesSubplot at 0x7f7c252d8ad0>"
      ]
     },
     "execution_count": 22,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "sns.boxplot(x =\"Pclass\",y =\"Age\",data = train)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.axes._subplots.AxesSubplot at 0x7f7c24141e90>"
      ]
     },
     "execution_count": 23,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "sns.barplot(x=\"Sex\",y=\"Age\",data = train)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "metadata": {},
   "outputs": [],
   "source": [
    "Age_median = train['Age'].mean()\n",
    "train['Age'].fillna(Age_median,inplace = True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>PassengerId</th>\n",
       "      <th>Survived</th>\n",
       "      <th>Pclass</th>\n",
       "      <th>Name</th>\n",
       "      <th>Sex</th>\n",
       "      <th>Age</th>\n",
       "      <th>SibSp</th>\n",
       "      <th>Parch</th>\n",
       "      <th>Ticket</th>\n",
       "      <th>Fare</th>\n",
       "      <th>Embarked</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>Braund, Mr. Owen Harris</td>\n",
       "      <td>male</td>\n",
       "      <td>22.0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>A/5 21171</td>\n",
       "      <td>7.2500</td>\n",
       "      <td>S</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>Cumings, Mrs. John Bradley (Florence Briggs Th...</td>\n",
       "      <td>female</td>\n",
       "      <td>38.0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>PC 17599</td>\n",
       "      <td>71.2833</td>\n",
       "      <td>C</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>2</td>\n",
       "      <td>3</td>\n",
       "      <td>1</td>\n",
       "      <td>3</td>\n",
       "      <td>Heikkinen, Miss. Laina</td>\n",
       "      <td>female</td>\n",
       "      <td>26.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>STON/O2. 3101282</td>\n",
       "      <td>7.9250</td>\n",
       "      <td>S</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>3</td>\n",
       "      <td>4</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>Futrelle, Mrs. Jacques Heath (Lily May Peel)</td>\n",
       "      <td>female</td>\n",
       "      <td>35.0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>113803</td>\n",
       "      <td>53.1000</td>\n",
       "      <td>S</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>4</td>\n",
       "      <td>5</td>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>Allen, Mr. William Henry</td>\n",
       "      <td>male</td>\n",
       "      <td>35.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>373450</td>\n",
       "      <td>8.0500</td>\n",
       "      <td>S</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>886</td>\n",
       "      <td>887</td>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "      <td>Montvila, Rev. Juozas</td>\n",
       "      <td>male</td>\n",
       "      <td>27.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>211536</td>\n",
       "      <td>13.0000</td>\n",
       "      <td>S</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>887</td>\n",
       "      <td>888</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>Graham, Miss. Margaret Edith</td>\n",
       "      <td>female</td>\n",
       "      <td>19.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>112053</td>\n",
       "      <td>30.0000</td>\n",
       "      <td>S</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>888</td>\n",
       "      <td>889</td>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>Johnston, Miss. Catherine Helen \"Carrie\"</td>\n",
       "      <td>female</td>\n",
       "      <td>28.0</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>W./C. 6607</td>\n",
       "      <td>23.4500</td>\n",
       "      <td>S</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>889</td>\n",
       "      <td>890</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>Behr, Mr. Karl Howell</td>\n",
       "      <td>male</td>\n",
       "      <td>26.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>111369</td>\n",
       "      <td>30.0000</td>\n",
       "      <td>C</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>890</td>\n",
       "      <td>891</td>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>Dooley, Mr. Patrick</td>\n",
       "      <td>male</td>\n",
       "      <td>32.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>370376</td>\n",
       "      <td>7.7500</td>\n",
       "      <td>Q</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>891 rows Ã— 11 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "     PassengerId  Survived  Pclass  \\\n",
       "0              1         0       3   \n",
       "1              2         1       1   \n",
       "2              3         1       3   \n",
       "3              4         1       1   \n",
       "4              5         0       3   \n",
       "..           ...       ...     ...   \n",
       "886          887         0       2   \n",
       "887          888         1       1   \n",
       "888          889         0       3   \n",
       "889          890         1       1   \n",
       "890          891         0       3   \n",
       "\n",
       "                                                  Name     Sex   Age  SibSp  \\\n",
       "0                              Braund, Mr. Owen Harris    male  22.0      1   \n",
       "1    Cumings, Mrs. John Bradley (Florence Briggs Th...  female  38.0      1   \n",
       "2                               Heikkinen, Miss. Laina  female  26.0      0   \n",
       "3         Futrelle, Mrs. Jacques Heath (Lily May Peel)  female  35.0      1   \n",
       "4                             Allen, Mr. William Henry    male  35.0      0   \n",
       "..                                                 ...     ...   ...    ...   \n",
       "886                              Montvila, Rev. Juozas    male  27.0      0   \n",
       "887                       Graham, Miss. Margaret Edith  female  19.0      0   \n",
       "888           Johnston, Miss. Catherine Helen \"Carrie\"  female  28.0      1   \n",
       "889                              Behr, Mr. Karl Howell    male  26.0      0   \n",
       "890                                Dooley, Mr. Patrick    male  32.0      0   \n",
       "\n",
       "     Parch            Ticket     Fare Embarked  \n",
       "0        0         A/5 21171   7.2500        S  \n",
       "1        0          PC 17599  71.2833        C  \n",
       "2        0  STON/O2. 3101282   7.9250        S  \n",
       "3        0            113803  53.1000        S  \n",
       "4        0            373450   8.0500        S  \n",
       "..     ...               ...      ...      ...  \n",
       "886      0            211536  13.0000        S  \n",
       "887      0            112053  30.0000        S  \n",
       "888      2        W./C. 6607  23.4500        S  \n",
       "889      0            111369  30.0000        C  \n",
       "890      0            370376   7.7500        Q  \n",
       "\n",
       "[891 rows x 11 columns]"
      ]
     },
     "execution_count": 33,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "train"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "metadata": {},
   "outputs": [],
   "source": [
    "Age_median = train['Age'].mean()\n",
    "train['Age'].fillna(Age_median,inplace = True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0      22.0\n",
       "1      38.0\n",
       "2      26.0\n",
       "3      35.0\n",
       "4      35.0\n",
       "       ... \n",
       "886    27.0\n",
       "887    19.0\n",
       "888    28.0\n",
       "889    26.0\n",
       "890    32.0\n",
       "Name: Age, Length: 891, dtype: float64"
      ]
     },
     "execution_count": 35,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "train[\"Age\"]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "metadata": {},
   "outputs": [],
   "source": [
    "age = train['Age'].mean()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 37,
   "metadata": {},
   "outputs": [],
   "source": [
    "train['Age'].fillna(age,inplace = True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 38,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "PassengerId    0\n",
       "Survived       0\n",
       "Pclass         0\n",
       "Name           0\n",
       "Sex            0\n",
       "Age            0\n",
       "SibSp          0\n",
       "Parch          0\n",
       "Ticket         0\n",
       "Fare           0\n",
       "Embarked       2\n",
       "dtype: int64"
      ]
     },
     "execution_count": 38,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "train.isnull().sum()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 39,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "count     889\n",
       "unique      3\n",
       "top         S\n",
       "freq      644\n",
       "Name: Embarked, dtype: object"
      ]
     },
     "execution_count": 39,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "train[\"Embarked\"].describe()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 40,
   "metadata": {},
   "outputs": [],
   "source": [
    "common_value = 'S'\n",
    "train.fillna(common_value,inplace = True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 41,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "PassengerId    0\n",
       "Survived       0\n",
       "Pclass         0\n",
       "Name           0\n",
       "Sex            0\n",
       "Age            0\n",
       "SibSp          0\n",
       "Parch          0\n",
       "Ticket         0\n",
       "Fare           0\n",
       "Embarked       0\n",
       "dtype: int64"
      ]
     },
     "execution_count": 41,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "train.isnull().sum()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 42,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.axes._subplots.AxesSubplot at 0x7f7c24126a90>"
      ]
     },
     "execution_count": 42,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "sns.heatmap(train.isnull(),yticklabels=False , cbar = False)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 43,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.axes._subplots.AxesSubplot at 0x7f7c240f4290>"
      ]
     },
     "execution_count": 43,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "sns.countplot(x = \"Age\",data = train)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 44,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.axes._subplots.AxesSubplot at 0x7f7c115e4f10>"
      ]
     },
     "execution_count": 44,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "train[\"Age\"].plot.hist()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 45,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "28.0"
      ]
     },
     "execution_count": 45,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "train['Age'].median()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 46,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "29.36158249158249"
      ]
     },
     "execution_count": 46,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "train['Age'].mean()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 47,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>male</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>3</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>4</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>886</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>887</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>888</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>889</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>890</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>891 rows Ã— 1 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "     male\n",
       "0       1\n",
       "1       0\n",
       "2       0\n",
       "3       0\n",
       "4       1\n",
       "..    ...\n",
       "886     1\n",
       "887     0\n",
       "888     0\n",
       "889     1\n",
       "890     1\n",
       "\n",
       "[891 rows x 1 columns]"
      ]
     },
     "execution_count": 47,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Logistic regression converting the column into categorical data values\n",
    "sex=pd.get_dummies(train['Sex'],drop_first = True)\n",
    "sex"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 48,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Q</th>\n",
       "      <th>S</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>3</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>4</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>886</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>887</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>888</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>889</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>890</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>891 rows Ã— 2 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "     Q  S\n",
       "0    0  1\n",
       "1    0  0\n",
       "2    0  1\n",
       "3    0  1\n",
       "4    0  1\n",
       "..  .. ..\n",
       "886  0  1\n",
       "887  0  1\n",
       "888  0  1\n",
       "889  0  0\n",
       "890  1  0\n",
       "\n",
       "[891 rows x 2 columns]"
      ]
     },
     "execution_count": 48,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "embar = pd.get_dummies(train['Embarked'],drop_first = True)\n",
    "embar"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 49,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>1</th>\n",
       "      <th>2</th>\n",
       "      <th>3</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>3</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>4</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>886</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>887</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>888</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>889</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>890</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>891 rows Ã— 3 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "     1  2  3\n",
       "0    0  0  1\n",
       "1    1  0  0\n",
       "2    0  0  1\n",
       "3    1  0  0\n",
       "4    0  0  1\n",
       "..  .. .. ..\n",
       "886  0  1  0\n",
       "887  1  0  0\n",
       "888  0  0  1\n",
       "889  1  0  0\n",
       "890  0  0  1\n",
       "\n",
       "[891 rows x 3 columns]"
      ]
     },
     "execution_count": 49,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "pclass = pd.get_dummies(train['Pclass'])\n",
    "pclass"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 50,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>2</th>\n",
       "      <th>3</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>3</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>4</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>886</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>887</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>888</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>889</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>890</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>891 rows Ã— 2 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "     2  3\n",
       "0    0  1\n",
       "1    0  0\n",
       "2    0  1\n",
       "3    0  0\n",
       "4    0  1\n",
       "..  .. ..\n",
       "886  1  0\n",
       "887  0  0\n",
       "888  0  1\n",
       "889  0  0\n",
       "890  0  1\n",
       "\n",
       "[891 rows x 2 columns]"
      ]
     },
     "execution_count": 50,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "pclass = pd.get_dummies(train['Pclass'],drop_first = True)\n",
    "pclass"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 51,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>PassengerId</th>\n",
       "      <th>Survived</th>\n",
       "      <th>Pclass</th>\n",
       "      <th>Name</th>\n",
       "      <th>Sex</th>\n",
       "      <th>Age</th>\n",
       "      <th>SibSp</th>\n",
       "      <th>Parch</th>\n",
       "      <th>Ticket</th>\n",
       "      <th>Fare</th>\n",
       "      <th>Embarked</th>\n",
       "      <th>male</th>\n",
       "      <th>Q</th>\n",
       "      <th>S</th>\n",
       "      <th>2</th>\n",
       "      <th>3</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>Braund, Mr. Owen Harris</td>\n",
       "      <td>male</td>\n",
       "      <td>22.0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>A/5 21171</td>\n",
       "      <td>7.2500</td>\n",
       "      <td>S</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>Cumings, Mrs. John Bradley (Florence Briggs Th...</td>\n",
       "      <td>female</td>\n",
       "      <td>38.0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>PC 17599</td>\n",
       "      <td>71.2833</td>\n",
       "      <td>C</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>2</td>\n",
       "      <td>3</td>\n",
       "      <td>1</td>\n",
       "      <td>3</td>\n",
       "      <td>Heikkinen, Miss. Laina</td>\n",
       "      <td>female</td>\n",
       "      <td>26.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>STON/O2. 3101282</td>\n",
       "      <td>7.9250</td>\n",
       "      <td>S</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>3</td>\n",
       "      <td>4</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>Futrelle, Mrs. Jacques Heath (Lily May Peel)</td>\n",
       "      <td>female</td>\n",
       "      <td>35.0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>113803</td>\n",
       "      <td>53.1000</td>\n",
       "      <td>S</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>4</td>\n",
       "      <td>5</td>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>Allen, Mr. William Henry</td>\n",
       "      <td>male</td>\n",
       "      <td>35.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>373450</td>\n",
       "      <td>8.0500</td>\n",
       "      <td>S</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>886</td>\n",
       "      <td>887</td>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "      <td>Montvila, Rev. Juozas</td>\n",
       "      <td>male</td>\n",
       "      <td>27.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>211536</td>\n",
       "      <td>13.0000</td>\n",
       "      <td>S</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>887</td>\n",
       "      <td>888</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>Graham, Miss. Margaret Edith</td>\n",
       "      <td>female</td>\n",
       "      <td>19.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>112053</td>\n",
       "      <td>30.0000</td>\n",
       "      <td>S</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>888</td>\n",
       "      <td>889</td>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>Johnston, Miss. Catherine Helen \"Carrie\"</td>\n",
       "      <td>female</td>\n",
       "      <td>28.0</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>W./C. 6607</td>\n",
       "      <td>23.4500</td>\n",
       "      <td>S</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>889</td>\n",
       "      <td>890</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>Behr, Mr. Karl Howell</td>\n",
       "      <td>male</td>\n",
       "      <td>26.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>111369</td>\n",
       "      <td>30.0000</td>\n",
       "      <td>C</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>890</td>\n",
       "      <td>891</td>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>Dooley, Mr. Patrick</td>\n",
       "      <td>male</td>\n",
       "      <td>32.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>370376</td>\n",
       "      <td>7.7500</td>\n",
       "      <td>Q</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>891 rows Ã— 16 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "     PassengerId  Survived  Pclass  \\\n",
       "0              1         0       3   \n",
       "1              2         1       1   \n",
       "2              3         1       3   \n",
       "3              4         1       1   \n",
       "4              5         0       3   \n",
       "..           ...       ...     ...   \n",
       "886          887         0       2   \n",
       "887          888         1       1   \n",
       "888          889         0       3   \n",
       "889          890         1       1   \n",
       "890          891         0       3   \n",
       "\n",
       "                                                  Name     Sex   Age  SibSp  \\\n",
       "0                              Braund, Mr. Owen Harris    male  22.0      1   \n",
       "1    Cumings, Mrs. John Bradley (Florence Briggs Th...  female  38.0      1   \n",
       "2                               Heikkinen, Miss. Laina  female  26.0      0   \n",
       "3         Futrelle, Mrs. Jacques Heath (Lily May Peel)  female  35.0      1   \n",
       "4                             Allen, Mr. William Henry    male  35.0      0   \n",
       "..                                                 ...     ...   ...    ...   \n",
       "886                              Montvila, Rev. Juozas    male  27.0      0   \n",
       "887                       Graham, Miss. Margaret Edith  female  19.0      0   \n",
       "888           Johnston, Miss. Catherine Helen \"Carrie\"  female  28.0      1   \n",
       "889                              Behr, Mr. Karl Howell    male  26.0      0   \n",
       "890                                Dooley, Mr. Patrick    male  32.0      0   \n",
       "\n",
       "     Parch            Ticket     Fare Embarked  male  Q  S  2  3  \n",
       "0        0         A/5 21171   7.2500        S     1  0  1  0  1  \n",
       "1        0          PC 17599  71.2833        C     0  0  0  0  0  \n",
       "2        0  STON/O2. 3101282   7.9250        S     0  0  1  0  1  \n",
       "3        0            113803  53.1000        S     0  0  1  0  0  \n",
       "4        0            373450   8.0500        S     1  0  1  0  1  \n",
       "..     ...               ...      ...      ...   ... .. .. .. ..  \n",
       "886      0            211536  13.0000        S     1  0  1  1  0  \n",
       "887      0            112053  30.0000        S     0  0  1  0  0  \n",
       "888      2        W./C. 6607  23.4500        S     0  0  1  0  1  \n",
       "889      0            111369  30.0000        C     1  0  0  0  0  \n",
       "890      0            370376   7.7500        Q     1  1  0  0  1  \n",
       "\n",
       "[891 rows x 16 columns]"
      ]
     },
     "execution_count": 51,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Now concatinating all the dummy values to the table\n",
    "train = pd.concat([train,sex,embar,pclass],axis = 1)\n",
    "train"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 53,
   "metadata": {},
   "outputs": [],
   "source": [
    "train.drop(['Sex','Embarked','PassengerId','Name','Ticket','Pclass'],axis = 1,inplace = True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 54,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Survived</th>\n",
       "      <th>Age</th>\n",
       "      <th>SibSp</th>\n",
       "      <th>Parch</th>\n",
       "      <th>Fare</th>\n",
       "      <th>male</th>\n",
       "      <th>Q</th>\n",
       "      <th>S</th>\n",
       "      <th>2</th>\n",
       "      <th>3</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>22.0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>7.2500</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>38.0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>71.2833</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>26.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>7.9250</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>3</td>\n",
       "      <td>1</td>\n",
       "      <td>35.0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>53.1000</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>4</td>\n",
       "      <td>0</td>\n",
       "      <td>35.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>8.0500</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>886</td>\n",
       "      <td>0</td>\n",
       "      <td>27.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>13.0000</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>887</td>\n",
       "      <td>1</td>\n",
       "      <td>19.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>30.0000</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>888</td>\n",
       "      <td>0</td>\n",
       "      <td>28.0</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>23.4500</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>889</td>\n",
       "      <td>1</td>\n",
       "      <td>26.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>30.0000</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>890</td>\n",
       "      <td>0</td>\n",
       "      <td>32.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>7.7500</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>891 rows Ã— 10 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "     Survived   Age  SibSp  Parch     Fare  male  Q  S  2  3\n",
       "0           0  22.0      1      0   7.2500     1  0  1  0  1\n",
       "1           1  38.0      1      0  71.2833     0  0  0  0  0\n",
       "2           1  26.0      0      0   7.9250     0  0  1  0  1\n",
       "3           1  35.0      1      0  53.1000     0  0  1  0  0\n",
       "4           0  35.0      0      0   8.0500     1  0  1  0  1\n",
       "..        ...   ...    ...    ...      ...   ... .. .. .. ..\n",
       "886         0  27.0      0      0  13.0000     1  0  1  1  0\n",
       "887         1  19.0      0      0  30.0000     0  0  1  0  0\n",
       "888         0  28.0      1      2  23.4500     0  0  1  0  1\n",
       "889         1  26.0      0      0  30.0000     1  0  0  0  0\n",
       "890         0  32.0      0      0   7.7500     1  1  0  0  1\n",
       "\n",
       "[891 rows x 10 columns]"
      ]
     },
     "execution_count": 54,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "train"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 55,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Implementing the logistic regression\n",
    "# Defining the dependent and independent\n",
    "x = train.drop(\"Survived\",axis = 1)\n",
    "y = train[\"Survived\"]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 68,
   "metadata": {},
   "outputs": [],
   "source": [
    "# splitting the training and testing data\n",
    "from sklearn.model_selection import train_test_split"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 87,
   "metadata": {},
   "outputs": [],
   "source": [
    "X_train, X_test, y_train, y_test = train_test_split(x, y, test_size=0.2,random_state = 0)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 72,
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.linear_model import LogisticRegression"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 73,
   "metadata": {},
   "outputs": [],
   "source": [
    "logmodel = LogisticRegression()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 79,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/home/lavanya/anaconda3/lib/python3.7/site-packages/sklearn/linear_model/logistic.py:432: FutureWarning: Default solver will be changed to 'lbfgs' in 0.22. Specify a solver to silence this warning.\n",
      "  FutureWarning)\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,\n",
       "                   intercept_scaling=1, l1_ratio=None, max_iter=100,\n",
       "                   multi_class='warn', n_jobs=None, penalty='l2',\n",
       "                   random_state=None, solver='warn', tol=0.0001, verbose=0,\n",
       "                   warm_start=False)"
      ]
     },
     "execution_count": 79,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "logmodel.fit(X_train,y_train)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 83,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Age</th>\n",
       "      <th>SibSp</th>\n",
       "      <th>Parch</th>\n",
       "      <th>Fare</th>\n",
       "      <th>male</th>\n",
       "      <th>Q</th>\n",
       "      <th>S</th>\n",
       "      <th>2</th>\n",
       "      <th>3</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>701</td>\n",
       "      <td>35.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>26.2875</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>46</td>\n",
       "      <td>28.0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>15.5000</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>35</td>\n",
       "      <td>42.0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>52.0000</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>324</td>\n",
       "      <td>28.0</td>\n",
       "      <td>8</td>\n",
       "      <td>2</td>\n",
       "      <td>69.5500</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>765</td>\n",
       "      <td>51.0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>77.9583</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>192</td>\n",
       "      <td>19.0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>7.8542</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>405</td>\n",
       "      <td>34.0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>21.0000</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>228</td>\n",
       "      <td>18.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>13.0000</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>181</td>\n",
       "      <td>28.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>15.0500</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>437</td>\n",
       "      <td>24.0</td>\n",
       "      <td>2</td>\n",
       "      <td>3</td>\n",
       "      <td>18.7500</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>712 rows Ã— 9 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "      Age  SibSp  Parch     Fare  male  Q  S  2  3\n",
       "701  35.0      0      0  26.2875     1  0  1  0  0\n",
       "46   28.0      1      0  15.5000     1  1  0  0  1\n",
       "35   42.0      1      0  52.0000     1  0  1  0  0\n",
       "324  28.0      8      2  69.5500     1  0  1  0  1\n",
       "765  51.0      1      0  77.9583     0  0  1  0  0\n",
       "..    ...    ...    ...      ...   ... .. .. .. ..\n",
       "192  19.0      1      0   7.8542     0  0  1  0  1\n",
       "405  34.0      1      0  21.0000     1  0  1  1  0\n",
       "228  18.0      0      0  13.0000     1  0  1  1  0\n",
       "181  28.0      0      0  15.0500     1  0  0  1  0\n",
       "437  24.0      2      3  18.7500     0  0  1  1  0\n",
       "\n",
       "[712 rows x 9 columns]"
      ]
     },
     "execution_count": 83,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "X_train"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 84,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Age</th>\n",
       "      <th>SibSp</th>\n",
       "      <th>Parch</th>\n",
       "      <th>Fare</th>\n",
       "      <th>male</th>\n",
       "      <th>Q</th>\n",
       "      <th>S</th>\n",
       "      <th>2</th>\n",
       "      <th>3</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>148</td>\n",
       "      <td>36.5</td>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "      <td>26.0000</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>159</td>\n",
       "      <td>28.0</td>\n",
       "      <td>8</td>\n",
       "      <td>2</td>\n",
       "      <td>69.5500</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>613</td>\n",
       "      <td>28.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>7.7500</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>411</td>\n",
       "      <td>28.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>6.8583</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>663</td>\n",
       "      <td>36.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>7.4958</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>503</td>\n",
       "      <td>37.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>9.5875</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>878</td>\n",
       "      <td>28.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>7.8958</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>711</td>\n",
       "      <td>28.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>26.5500</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>298</td>\n",
       "      <td>28.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>30.5000</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>509</td>\n",
       "      <td>26.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>56.4958</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>179 rows Ã— 9 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "      Age  SibSp  Parch     Fare  male  Q  S  2  3\n",
       "148  36.5      0      2  26.0000     1  0  1  1  0\n",
       "159  28.0      8      2  69.5500     1  0  1  0  1\n",
       "613  28.0      0      0   7.7500     1  1  0  0  1\n",
       "411  28.0      0      0   6.8583     1  1  0  0  1\n",
       "663  36.0      0      0   7.4958     1  0  1  0  1\n",
       "..    ...    ...    ...      ...   ... .. .. .. ..\n",
       "503  37.0      0      0   9.5875     0  0  1  0  1\n",
       "878  28.0      0      0   7.8958     1  0  1  0  1\n",
       "711  28.0      0      0  26.5500     1  0  1  0  0\n",
       "298  28.0      0      0  30.5000     1  0  1  0  0\n",
       "509  26.0      0      0  56.4958     1  0  1  0  1\n",
       "\n",
       "[179 rows x 9 columns]"
      ]
     },
     "execution_count": 84,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "X_test"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 85,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "701    1\n",
       "46     0\n",
       "35     0\n",
       "324    0\n",
       "765    1\n",
       "      ..\n",
       "192    1\n",
       "405    0\n",
       "228    0\n",
       "181    0\n",
       "437    1\n",
       "Name: Survived, Length: 712, dtype: int64"
      ]
     },
     "execution_count": 85,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "y_train"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 86,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "148    0\n",
       "159    0\n",
       "613    0\n",
       "411    0\n",
       "663    0\n",
       "      ..\n",
       "503    0\n",
       "878    0\n",
       "711    0\n",
       "298    1\n",
       "509    1\n",
       "Name: Survived, Length: 179, dtype: int64"
      ]
     },
     "execution_count": 86,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "y_test"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 88,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1,\n",
       "       0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n",
       "       1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0,\n",
       "       1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0,\n",
       "       1, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1,\n",
       "       0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0,\n",
       "       0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 1, 0,\n",
       "       1, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0,\n",
       "       1, 0, 0])"
      ]
     },
     "execution_count": 88,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "prediction = logmodel.predict(X_test)\n",
    "prediction"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 89,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[93, 17],\n",
       "       [20, 49]])"
      ]
     },
     "execution_count": 89,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# checking whether the prediction is correct or not by using the predicted values and actual values\n",
    "# using confusion matrix\n",
    "from sklearn.metrics import confusion_matrix\n",
    "confusion_matrix = confusion_matrix(y_test,prediction)\n",
    "confusion_matrix"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 90,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.7932960893854749"
      ]
     },
     "execution_count": 90,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# calculate the accuracy\n",
    "from sklearn.metrics import accuracy_score\n",
    "accuracy_score(y_test,prediction)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 93,
   "metadata": {},
   "outputs": [],
   "source": [
    "# ROC CURVE\n",
    "#check the curve once later"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 42,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "import matplotlib.pyplot as plt\n",
    "from sklearn.metrics import roc_curve, auc\n",
    "\n",
    "import seaborn as sns\n",
    "sns.set('talk', 'whitegrid', 'dark', font_scale=1.5, font='Ricty',\n",
    "        rc={\"lines.linewidth\": 2, 'grid.linestyle': '--'})\n",
    "\n",
    "fpr, tpr, _ = roc_curve(y_test, [0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1,\n",
    "       0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n",
    "       1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0,\n",
    "       1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0,\n",
    "       1, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1,\n",
    "       0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0,\n",
    "       0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 1, 0,\n",
    "       1, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0,\n",
    "       1, 0, 0])\n",
    "roc_auc = auc(fpr, tpr)\n",
    "\n",
    "lw = 2\n",
    "plt.figure()\n",
    "plt.plot(fpr, tpr, color='darkorange',\n",
    "         lw=lw, label='ROC curve (AUC = %0.2f)' % roc_auc)\n",
    "plt.plot([0, 1], [0, 1], color='navy', lw=lw, linestyle='--')\n",
    "plt.xlim([0.0, 1.0])\n",
    "plt.ylim([0.0, 1.05])\n",
    "plt.xlabel(\"False Positive Rate\")\n",
    "plt.ylabel(\"True Positive Rate\")\n",
    "plt.title(\"Receiver Operating Characteristic curve\")\n",
    "plt.legend(loc=\"lower right\")\n",
    "plt.show()\n",
    "plt.savefig('roc_auc.png')\n",
    "plt.close()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 39,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "import sklearn.metrics as metrics\n",
    "from sklearn.metrics import roc_curve, auc\n",
    "import matplotlib.pyplot as plt\n",
    "fpr, tpr, thresholds = roc_curve(y_test, [0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1,\n",
    "       0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n",
    "       1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0,\n",
    "       1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0,\n",
    "       1, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1,\n",
    "       0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0,\n",
    "       0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 1, 0,\n",
    "       1, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0,\n",
    "       1, 0, 0])\n",
    "roc_auc = auc(fpr, tpr)\n",
    "#print \"Area under the ROC curve : %f\" % roc_auc\n",
    "plt.clf()\n",
    "plt.plot(fpr, tpr, label='ROC curve (area = %0.2f)' % roc_auc)\n",
    "plt.plot([0, 1], [0, 1], 'k--')\n",
    "plt.xlim([0.0, 1.0])\n",
    "plt.ylim([0.0, 1.0])\n",
    "plt.xlabel('False Positive Rate')\n",
    "plt.ylabel('True Positive Rate')\n",
    "plt.title('Receiver operating characteristic example')\n",
    "plt.legend(loc=\"lower right\")\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [
    {
     "ename": "NameError",
     "evalue": "name 'y_test' is not defined",
     "output_type": "error",
     "traceback": [
      "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[0;31mNameError\u001b[0m                                 Traceback (most recent call last)",
      "\u001b[0;32m<ipython-input-12-b89f9d0f359e>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m\u001b[0m\n\u001b[1;32m      2\u001b[0m \u001b[0;32mfrom\u001b[0m \u001b[0msklearn\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mmetrics\u001b[0m \u001b[0;32mimport\u001b[0m \u001b[0mroc_curve\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mauc\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      3\u001b[0m \u001b[0;32mimport\u001b[0m \u001b[0mmatplotlib\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mpyplot\u001b[0m \u001b[0;32mas\u001b[0m \u001b[0mplt\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 4\u001b[0;31m fpr, tpr, thresholds = roc_curve(y_test, [0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1,\n\u001b[0m\u001b[1;32m      5\u001b[0m        \u001b[0;36m0\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;36m0\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;36m1\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;36m1\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;36m0\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;36m1\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;36m1\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;36m1\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;36m0\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;36m1\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;36m0\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;36m0\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;36m0\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;36m0\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;36m0\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;36m0\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;36m0\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;36m0\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;36m0\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;36m0\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;36m0\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;36m0\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      6\u001b[0m        \u001b[0;36m1\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;36m0\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;36m0\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;36m1\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;36m0\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;36m0\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;36m0\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;36m1\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;36m1\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;36m0\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;36m0\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;36m0\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;36m0\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;36m0\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;36m0\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;36m0\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;36m0\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;36m1\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;36m1\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;36m0\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;36m1\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;36m0\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;31mNameError\u001b[0m: name 'y_test' is not defined"
     ]
    }
   ],
   "source": [
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 47,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 48,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.4"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
